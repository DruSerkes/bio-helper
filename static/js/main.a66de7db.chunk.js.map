{"version":3,"sources":["components/UserInput.tsx","components/CounterTable.tsx","components/LetterDensityTable.tsx","helpers.ts","components/SocialMediaTable.tsx","components/Insights.tsx","App.tsx","hooks/useLocalStorage.ts","index.tsx"],"names":["UserInput","input","setInput","className","htmlFor","id","name","placeholder","value","onChange","e","target","CounterTable","bio","characterCount","length","wordCount","replace","split","filter","word","trim","LetterDensityTable","letters","topTenLettersWithCount","chars","entries","Object","sort","a","b","entry","slice","filterTopTen","reduce","counter","character","toLowerCase","map","letterWithCount","toUpperCase","SocialMediaTable","minLength","isMinimumLength","socialMediaHandleRegex","RegExp","websiteRegex","containsHandle","test","containsWebsite","Insights","App","key","INITIAL_STATE","useState","item","localStorage","getItem","JSON","parse","console","warn","setValue","newValue","valueToStore","Function","setItem","stringify","useLocalStorage","setBio","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a66de7db.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface UserInputProps {\n  input?: string,\n  setInput: React.Dispatch<React.SetStateAction<string>>\n};\n\nexport const UserInput: React.FC<UserInputProps> = ({ input, setInput }) => {\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value);\n  return (\n    <div className=\"UserInput\">\n      <label htmlFor=\"bio\">My Bio</label>\n      <textarea id=\"bio\" name=\"bio\" placeholder=\"Start typing your bio here...\" value={input} onChange={handleChange} />\n    </div>\n  )\n};","import * as React from 'react';\n\ninterface CounterTableProps {\n  bio: string\n};\n\nexport const CounterTable: React.FC<CounterTableProps> = ({ bio }) => {\n  const characterCount = bio.length;\n  const wordCount = bio.replace('\\n', ' ').split(' ').filter(word => word.trim() !== '').length;\n  return (\n    <table className=\"CounterTable\">\n      <tbody>\n        <tr>\n          <td className=\"CounterTable-Left\">Character Count:</td>\n          <td className=\"CounterTable-Right\">{characterCount}</td>\n        </tr>\n        <tr>\n          <td className=\"CounterTable-Left\">Word Count:</td>\n          <td className=\"CounterTable-Right\">{wordCount}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n};","import * as React from 'react';\nimport { countLetters, filterTopTen } from '../helpers';\n\ninterface LetterDensityTableProps {\n  bio: string\n}\n\nexport const LetterDensityTable: React.FC<LetterDensityTableProps> = ({ bio }) => {\n  const letterCount = countLetters(bio);\n  const topTenLettersWithCount = filterTopTen(letterCount);\n  return (\n    <table className=\"LetterDensityTable\">\n      <tbody>\n        {topTenLettersWithCount.map((letterWithCount) => (\n          <tr key={letterWithCount[0]}>\n            <td className=\"LetterDensityTable-Left\"><b>{letterWithCount[0]?.toUpperCase()}</b></td>\n            <td className=\"LetterDensityTable-Right\">{letterWithCount[1]}</td>\n          </tr>\n        )\n        )}\n      </tbody>\n    </table>\n  )\n};","interface freqCounterType {\n\t[key: string]: number\n}\n\nexport const countLetters = (letters: string) => {\n\tconst characterArray = [...letters];\n\treturn characterArray.reduce<freqCounterType>((counter: freqCounterType, character: string) => {\n\t\tcounter[character.toLowerCase()] = counter[character.toLowerCase()] ? counter[character.toLowerCase()] + 1 : 1;\n\t\treturn counter;\n\t}, {});\n};\n\nexport const filterTopTen = (chars: freqCounterType) => {\n\tconst entries = Object.entries(chars);\n\tentries.sort((a, b) => b[1] - a[1]);\n\tconst withoutSpaces = entries.filter(entry => entry[0].trim() !== \"\");\n\treturn withoutSpaces.slice(0, 10);\n};","import * as React from 'react';\n\ninterface SocialMediaTableProps {\n  bio: string,\n  minLength: number\n}\n\nexport const SocialMediaTable: React.FC<SocialMediaTableProps> = ({ bio, minLength }) => {\n  const isMinimumLength = bio.length > minLength;\n  const socialMediaHandleRegex = new RegExp(/@\\w+/i);\n  const websiteRegex = new RegExp(/[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/i);\n  const containsHandle = socialMediaHandleRegex.test(bio);\n  const containsWebsite = websiteRegex.test(bio);\n  return (\n    <table className=\"SocialMediaTable\">\n      <tbody>\n        <tr>\n          <td>\n            Website:\n          </td>\n          <td>\n            {containsWebsite ? '✅' : '❌'}\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Social media handle:\n          </td>\n          <td>\n            {containsHandle ? '✅' : '❌'}\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Meets minimum length\n          </td>\n          <td>\n            {isMinimumLength ? '✅' : '❌'}\n          </td>\n        </tr>\n      </tbody>\n      {/* } */}\n    </table>\n  )\n};","import * as React from 'react';\nimport { CounterTable } from './CounterTable';\nimport { LetterDensityTable } from './LetterDensityTable';\nimport { SocialMediaTable } from './SocialMediaTable';\n\ninterface InsightsProps {\n  bio: string\n}\n\nexport const Insights: React.FC<InsightsProps> = ({ bio }) => {\n\n  return (\n    <div className=\"Insights\">\n      <h3>Insights</h3>\n      <article>\n        <h4>Essential Counts</h4>\n        <CounterTable bio={bio} />\n\n        <hr />\n\n        <h4>Social Insights</h4>\n        <SocialMediaTable bio={bio} minLength={40} />\n\n        <hr />\n\n        <h4>Letter Density</h4>\n        <LetterDensityTable bio={bio} />\n      </article>\n    </div>\n  )\n};","import React from 'react';\nimport './App.css';\nimport { UserInput } from './components/UserInput';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { Insights } from './components/Insights';\n/*\nTODO \n1. Add copy / clear buttons \n2. Test them \n3. Decide what other features to add \n  a. further insights (social media based)?\n  b. dark mode \n  c. set min/max length - view alert when you are under / over  \n  d. toggle certain insights off / on\n*/\n\nexport const App: React.FC = () => {\n  const [bio, setBio] = useLocalStorage('user-bio', '');\n  return (\n    <div className=\"App\">\n      <h1>Bio Helper</h1>\n      <main>\n        <div className=\"Left\">\n          <UserInput input={bio} setInput={setBio} />\n\n        </div>\n        <div className=\"Right\">\n          <Insights bio={bio} />\n        </div>\n      </main>\n\n    </div>\n  );\n};\n","import { Dispatch, SetStateAction, useState } from 'react';\n\nexport function useLocalStorage<T>(key: string, INITIAL_STATE: T): [T, Dispatch<SetStateAction<T>>] {\n    const [value, setValue] = useState(() => {\n        const item = localStorage.getItem(key);\n        try {\n            return item ? JSON.parse(item) : INITIAL_STATE;\n        } catch (e) {\n            console.warn(`Error getting item from localStorage: ${key} `, e);\n            return INITIAL_STATE;\n        }\n    });\n\n    const setStateAndLocalStorage = (newValue: T | ((oldVal: T) => T)) => {\n        try {\n            const valueToStore = newValue instanceof Function ? newValue(value) : newValue;\n            localStorage.setItem(key, JSON.stringify(valueToStore));\n            setValue(valueToStore);\n        } catch (e) {\n            console.warn(`Error setting item to localStorage: ${key} `, e);\n        }\n    };\n\n    return [value, setStateAndLocalStorage];\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}